# Climate packages

# Maybe useful for living room when we have multiple thermostats
#climate:
#  - platform: climate_template
#    name: "Office Thermostat"
#    unique_id: office_thermostat_template
#    modes:
#      - "auto"
#      - "heat"
#      - "off"
#    min_temp: 18
#    max_temp: 24
#    # This reads the temperature from your external Zigbee sensor
#    current_temperature_template: "{{ states('sensor.office_temperature_temperature') | float(0) }}"
#    # This reads the target temperature from your actual radiator thermostat
#    target_temperature_template: "{{ state_attr('climate.office_radiator', 'temperature') | float(21) }}"
#    # This reads the current action (heating or idle) from your radiator thermostat
#    hvac_action_template: "{{ state_attr('climate.office_radiator', 'hvac_action') | default('idle') }}"
#    # This defines what happens when you change the temperature on your new "Office Thermostat"
#    set_temperature:
#      - service: climate.set_temperature
#        # The 'target' key is now the recommended way to specify entities
#        target:
#          entity_id: climate.office_radiator
#        data:
#          temperature: "{{ temperature }}"
#    # This defines what happens when you change the HVAC mode (heat/off)
#    set_hvac_mode:
#      - service: climate.set_hvac_mode
#        target:
#          entity_id: climate.office_radiator
#        data:
#          hvac_mode: "{{ hvac_mode }}

automation:
  - alias: "Sync Office External Temp to TRV"
    id: office_external_temp_to_trv
    description: "Sends the external sensor temperature to the Sonoff TRV"
    trigger:
      - platform: state
        entity_id:
          - sensor.office_temperature_temperature
    condition:
      # This ensures we only send valid number values
      - condition: template
        value_template: "{{ trigger.to_state.state not in ['unavailable', 'unknown'] }}"
    action:
      - service: number.set_value
        target:
          entity_id: number.office_radiator_external_temperature_input #<-- Make sure this is correct
        data:
          value: "{{ states('sensor.office_temperature_temperature') }}"
    mode: single